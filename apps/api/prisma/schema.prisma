// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid        String    @id @default(cuid())
  email      String
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  roleId     Int
  role       Role      @relation(fields: [roleId], references: [id])
  referralId String?   @unique
  referral   Referral? @relation(fields: [referralId], references: [uid])
  event      Event[]
  tiket      Ticket[]
  review     Review[]

  @@map("users")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User[]

  @@map("roles")
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  price       Int
  sheduleAt   DateTime    @db.DateTime()
  location    String
  description String
  category    String
  typeEvent   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  userId      String
  user        User        @relation(fields: [userId], references: [uid])
  promotion   Promotion[]
  ticket      Ticket[]
  review      Review[]

  @@map("events")
}

model Ticket {
  uid         String    @id @default(cuid())
  totalTicket Int
  typeTicket  String
  price       Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  eventid     Int
  event       Event     @relation(fields: [eventid], references: [id])
  User        User?     @relation(fields: [userUid], references: [uid])
  userUid     String?

  @@map("tickets")
}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Event     Event?    @relation(fields: [eventId], references: [id])
  eventId   Int?
  User      User?     @relation(fields: [userUid], references: [uid])
  userUid   String?

  @@map("reviews")
}

model Promotion {
  id          Int      @id @default(autoincrement())
  description String
  discount    Int
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  eventId     Int
  event       Event    @relation(fields: [eventId], references: [id])

  @@map("promotions")
}

model Referral {
  uid                String    @id @default(cuid())
  referralCode       String    @default(cuid())
  referralUserReward Int       @default(10000)
  referredUserReward Int       @default(10)
  expiredDate        DateTime  @db.Date
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  user               User?

  @@map("referrals")
}
