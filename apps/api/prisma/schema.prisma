// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid        String    @id @default(cuid())
  email      String
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  expiredDate DateTime?
  roleId     Int
  role       Role      @relation(fields: [roleId], references: [id])
  referralId String?   @unique
  referral   Referral? @relation(fields: [referralId], references: [uid])
  tiket      Ticket[]
  review     Review[]

  @@map("users")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user User[]

  @@map("roles")
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  price       Int
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  startTime   DateTime    @db.Time()
  endTime     DateTime    @db.Time()
  locationId  Int
  location    Location    @relation(fields: [locationId], references: [id])
  description String
  eventType   EventType   @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  promotion   Promotion[]
  ticket      Ticket[]
  review      Review[]
  eventImage  EventImage?

  eventCategoryId Int
  eventCategory   EventCategory @relation(fields: [eventCategoryId], references: [id])

  @@map("events")
}

model Location {
  id        Int       @id @default(autoincrement())
  city      String
  province  String
  zip       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  event     Event[]

  @@map("eventlocations")
}

model EventType {
  id        Int       @id @default(autoincrement())
  name      String
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event[]

  @@map("eventtypes")
}

model EventImage {
  id      Int    @id @default(autoincrement())
  url     String
  eventId Int    @unique
  event   Event  @relation(fields: [eventId], references: [id])

  @@map("eventImages")
}

model EventCategory {
  id        Int       @id @default(autoincrement())
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event[]

  @@map("eventcategories")
}

model Ticket {
  id          Int       @id @default(autoincrement())
  totalTicket Int
  typeTicket  String
  price       Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  eventId     Int
  event       Event     @relation(fields: [eventId], references: [id])
  User        User?     @relation(fields: [userId], references: [uid])
  userId      String?

  @@map("tickets")
}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  event     Event?    @relation(fields: [eventId], references: [id])
  eventId   Int?
  User      User?     @relation(fields: [userUid], references: [uid])
  userUid   String?

  @@map("reviews")
}

model Promotion {
  id           Int       @id @default(autoincrement())
  codeVoucher  String
  totalVoucher Int
  discount     Int
  startDate    DateTime  @db.Date
  endDate      DateTime  @db.Date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  eventId      Int
  event        Event     @relation(fields: [eventId], references: [id])

  @@map("promotions")
}

model Referral {
  uid                String    @id @default(cuid())
  referralCode       String    @default(cuid())
  referralUserReward Int       @default(10000)
  referredUserReward Int       @default(10)
  points     Int?   @default(0)
  expiredDate        DateTime  @db.Date
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  user               User?

  @@map("referrals")
}



